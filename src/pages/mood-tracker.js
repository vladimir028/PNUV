import React, { useState } from "react";
import { Line } from "react-chartjs-2";
import {
    Chart as ChartJS,
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    Tooltip,
    Legend,
} from "chart.js";

ChartJS.register(
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    Tooltip,
    Legend
);

const questions = [
    "–ö–æ–ª–∫—É —Å–µ —á—É–≤—Å—Ç–≤—É–≤–∞—Ç–µ —Å—Ä–µ—ú–Ω–æ –¥–µ–Ω–µ—Å?",
    "–ö–æ–ª–∫—É —Å—Ç–µ —Å–µ —á—É–≤—Å—Ç–≤—É–≤–∞–ª–µ —Å—Ç—Ä–µ—Å–∏—Ä–∞–Ω–æ –æ–≤–∞–∞ –Ω–µ–¥–µ–ª–∞?",
    "–ö–æ–ª–∫—É –¥–æ–±—Ä–æ —Å–ø–∏–µ–≤—Ç–µ –∏–∑–º–∏–Ω–∞—Ç–∞—Ç–∞ –Ω–æ—ú?",
    "–ö–æ–ª–∫—É —Å—Ç–µ –∏–º–∞–ª–µ –µ–Ω–µ—Ä–≥–∏—ò–∞ –¥–µ–Ω–µ—Å?",
    "–ö–æ–ª–∫—É —á–µ—Å—Ç–æ —Å—Ç–µ —Å–µ —á—É–≤—Å—Ç–≤—É–≤–∞–ª–µ –æ—Å–∞–º–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∞—Ç–∞ –Ω–µ–¥–µ–ª–∞?",
    "–ö–æ–ª–∫—É —Å—Ç–µ —Å–µ —á—É–≤—Å—Ç–≤—É–≤–∞–ª–µ –≤–æ–∑–Ω–µ–º–∏—Ä–µ–Ω–æ –∏–ª–∏ –∞–Ω–∫—Å–∏–æ–∑–Ω–æ –≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ –¥–µ–Ω–æ–≤–∏?",
    "–ö–æ–ª–∫—É —Å—Ç–µ –±–∏–ª–µ –∑–∞–¥–æ–≤–æ–ª–Ω–∏ –æ–¥ —Å–≤–æ–∏—Ç–µ —Å–æ—Ü–∏—ò–∞–ª–Ω–∏ –æ–¥–Ω–æ—Å–∏?",
    "–ö–æ–ª–∫—É —Å—Ç–µ –∏–º–∞–ª–µ –∂–µ–ª–±–∞ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–∏ –≤–∏ —Å–µ –¥–æ–ø–∞—ì–∞–∞—Ç?",
    "–ö–æ–ª–∫—É —á–µ—Å—Ç–æ —Å—Ç–µ —Å–µ —á—É–≤—Å—Ç–≤—É–≤–∞–ª–µ —Ñ—Ä—É—Å—Ç—Ä–∏—Ä–∞–Ω–æ?",
    "–ö–æ–ª–∫—É —á–µ—Å—Ç–æ —Å—Ç–µ —Å–µ —á—É–≤—Å—Ç–≤—É–≤–∞–ª–µ –º–æ—Ç–∏–≤–∏—Ä–∞–Ω–æ –¥–∞ —É—á–∏—Ç–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–∏—Ç–µ –Ω–∞ –Ω–µ—à—Ç–æ?",
    "–ö–æ–ª–∫—É —Å—Ç–µ —Å–µ —á—É–≤—Å—Ç–≤—É–≤–∞–ª–µ –æ–ø—É—à—Ç–µ–Ω–æ –∏ —Ä–µ–ª–∞–∫—Å–∏—Ä–∞–Ω–æ?",
    "–ö–æ–ª–∫—É —á–µ—Å—Ç–æ —Å—Ç–µ –∏–º–∞–ª–µ –ø—Ä–æ–±–ª–µ–º–∏ —Å–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—ò–∞?",
    "–ö–æ–ª–∫—É —Å—Ç–µ –±–∏–ª–µ –∞–∫—Ç–∏–≤–Ω–∏ —Ñ–∏–∑–∏—á–∫–∏ –≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 7 –¥–µ–Ω–∞?",
    "–ö–æ–ª–∫—É —á–µ—Å—Ç–æ —Å—Ç–µ —Å–µ —á—É–≤—Å—Ç–≤—É–≤–∞–ª–µ –Ω–µ—Ä–≤–æ–∑–Ω–æ?",
    "–ö–æ–ª–∫—É —Å—Ç–µ –∑–∞–¥–æ–≤–æ–ª–Ω–∏ –æ–¥ —Å–≤–æ—ò–æ—Ç –∏–∑–≥–ª–µ–¥?",
    "–ö–æ–ª–∫—É —Å—Ç–µ –∏–º–∞–ª–µ —á—É–≤—Å—Ç–≤–æ –Ω–∞ –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç?",
    "–ö–æ–ª–∫—É —Å—Ç–µ —Å–µ —á—É–≤—Å—Ç–≤—É–≤–∞–ª–µ –≥–æ—Ä–¥–∏ –Ω–∞ —Å–µ–±–µ?",
    "–ö–æ–ª–∫—É —Å—Ç–µ –∏–º–∞–ª–µ –º–æ–∂–Ω–æ—Å—Ç –¥–∞ —Ä–∞–∑–≥–æ–≤–∞—Ä–∞—Ç–µ —Å–æ –Ω–µ–∫–æ–≥–æ –∫–æ–≥–∞ –≤–∏ –µ —Ç–µ—à–∫–æ?",
    "–ö–æ–ª–∫—É —Å—Ç–µ –±–∏–ª–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏ –∑–∞ –¥—Ä—É–∂–µ—ö–µ —Å–æ –ø—Ä–∏—ò–∞—Ç–µ–ª–∏—Ç–µ?",
    "–ö–æ–ª–∫—É —Å—Ç–µ —Å–µ —á—É–≤—Å—Ç–≤—É–≤–∞–ª–µ —Å–∏–≥—É—Ä–Ω–æ –≤–æ —Å–≤–æ—ò–∞—Ç–∞ –æ–∫–æ–ª–∏–Ω–∞?"
];

const adviceByScore = (score) => {
    if (score <= 40) {
        return {
            title: "–ü–æ—Ç—Ç–∏–∫–Ω–∏ —ò–∞ —Ç–≤–æ—ò–∞—Ç–∞ –¥–æ–±—Ä–æ—Å–æ—Å—Ç–æ—ò–±–∞!",
            text:
                "–ó–∞–±–∞–≤–∏ –º–∞–ª–∫—É, –Ω–∞–ø—Ä–∞–≤–∏ —à–µ—Ç–∞—ö–µ –Ω–∞ —Å–≤–µ–∂ –≤–æ–∑–¥—É—Ö –∏ –ø—Ä–æ–±–∞—ò –¥–∞ –ø–∏—à—É–≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫ —Å–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏ –º–∏—Å–ª–∏.",
            challenge: "–ü—Ä–µ–¥–∏–∑–≤–∏–∫: –°–ª–µ–¥–Ω–∏–≤–µ 3 –¥–µ–Ω–∞ –Ω–∞–ø–∏—à–∏ 3 —Ä–∞–±–æ—Ç–∏ –∑–∞ –∫–æ–∏ —Å–∏ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω/–Ω–∞.",
            color: "#d9534f", // —Ü—Ä–≤–µ–Ω–∞
        };
    } else if (score <= 70) {
        return {
            title: "–î–æ–±—Ä–æ –µ, –Ω–æ –º–æ–∂–µ –∏ –ø–æ–¥–æ–±—Ä–æ!",
            text: "–ü—Ä–æ–±–∞—ò —Å–µ–∫–æ—ò –¥–µ–Ω –¥–∞ –ø—Ä–∞–≤–∏—à –∫—Ä–∞—Ç–∫–∞ –≤–µ–∂–±–∞ –∑–∞ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—ò–∞ –∏–ª–∏ –¥–ª–∞–±–æ–∫–æ –¥–∏—à–µ—ö–µ.",
            challenge: "–ü—Ä–µ–¥–∏–∑–≤–∏–∫: –í–∫–ª—É—á–∏ 5 –º–∏–Ω—É—Ç–∏ –º–µ–¥–∏—Ç–∞—Ü–∏—ò–∞ –∏–ª–∏ –¥–∏—à–µ—ö–µ –¥–Ω–µ–≤–Ω–æ.",
            color: "#f0ad4e", // –ø–æ—Ä—Ç–æ–∫–∞–ª–æ–≤–∞
        };
    } else {
        return {
            title: "–û–¥–ª–∏—á–Ω–æ —Å–µ —á—É–≤—Å—Ç–≤—É–≤–∞—à!",
            text:
                "–ü—Ä–æ–¥–æ–ª–∂–∏ —Å–æ –¥–æ–±—Ä–∏—Ç–µ –Ω–∞–≤–∏–∫–∏ –∏ –æ–±–∏–¥–∏ —Å–µ –¥–∞ –ø–æ–º–∞–≥–∞—à –∏ –Ω–∞ –¥—Ä—É–≥–∏—Ç–µ.",
            challenge: "–ü—Ä–µ–¥–∏–∑–≤–∏–∫: –°–ø–æ–¥–µ–ª–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∞ –º–∏—Å–ª–∞ –∏–ª–∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç —Å–æ –ø—Ä–∏—ò–∞—Ç–µ–ª.",
            color: "#5cb85c", // –∑–µ–ª–µ–Ω–∞
        };
    }
};

const MoodTracker = () => {
    const [answers, setAnswers] = useState([]);
    const [submitted, setSubmitted] = useState(false);

    const handleChange = (index, value) => {
        const newAnswers = [...answers];
        newAnswers[index] = Number(value);
        setAnswers(newAnswers);
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        setSubmitted(true);
    };

    const totalScore = answers.reduce((a, b) => a + b, 0);
    const advice = adviceByScore(totalScore);

    // Progress bar calculation
    const answeredCount = answers.filter((a) => a !== null).length;
    const progressPercent = (answeredCount / questions.length) * 100;

    const isDisabled = () => {
        return answers.length < questions.length || answers.includes(undefined) || answers.includes(null);
    }

    // Chart data and options
    const chartData = {
        labels: questions.map((_, i) => `–ü—Ä–∞—à–∞—ö–µ ${i + 1}`),
        datasets: [
            {
                label: "–û–¥–≥–æ–≤–æ—Ä (1-5)",
                data: answers,
                fill: false,
                backgroundColor: "#00B9F2",
                borderColor: "#00B9F2",
                tension: 0.3,
                pointHoverRadius: 9,
                pointRadius: 6,
                borderWidth: 3,
                hoverBorderWidth: 4,
            },
        ],
    };

    const chartOptions = {
        responsive: true,
        plugins: {
            legend: { display: false },
            tooltip: {
                enabled: true,
                backgroundColor: '#00B9F2',
                titleFont: { size: 16, weight: 'bold' },
                bodyFont: { size: 14 },
                cornerRadius: 6,
                padding: 10,
            },
        },
        scales: {
            y: {
                min: 1,
                max: 5,
                ticks: { stepSize: 1, color: '#00B9F2', font: { weight: '600' } },
                grid: { color: '#f2f2f2' },
                title: {
                    display: true,
                    text: "–û—Ü–µ–Ω–∞",
                    color: '#00B9F2',
                    font: { size: 14, weight: '600' },
                },
            },
            x: {
                ticks: { color: '#00B9F2', font: { weight: '600' } },
                grid: { display: false },
                title: {
                    display: true,
                    text: "–ü—Ä–∞—à–∞—ö–∞",
                    color: '#00B9F2',
                    font: { size: 14, weight: '600' },
                },
            },
        },
    };

    return (
        <div
            className="container my-5"
            style={{
                fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                color: "#3a2f2f",
                maxWidth: "900px",
            }}
        >
            <h2 className="mb-4" style={{ color: "#00B9F2", textAlign: "center", fontWeight: "700", fontSize: "2.75rem", letterSpacing: "2px", textShadow: "1px 1px 2px #ccc" }}>
                Mood Tracker
            </h2>

            {!submitted ? (
                <>
                    <div className="mb-4" style={{ height: '30px', borderRadius: '15px', backgroundColor: '#f0e6d2', overflow: 'hidden' }}>
                        <div
                            className="progress-bar"
                            role="progressbar"
                            style={{
                                width: `${progressPercent}%`,
                                backgroundColor: "#00B9F2",
                                height: '100%',
                                borderRadius: '15px',
                                transition: "width 0.7s ease-in-out",
                                boxShadow: '0 0 8px #00B9F2',
                            }}
                            aria-valuenow={progressPercent}
                            aria-valuemin="0"
                            aria-valuemax="100"
                        />
                    </div>
                    <p style={{ textAlign: 'right', fontWeight: '600', marginTop: '5px', color: '#00B9F2' }}>
                        {Math.round(progressPercent)}% –∑–∞–≤—Ä—à–µ–Ω–æ
                    </p>
                    <div className="d-flex justify-content-between align-items-center mb-4 px-3 py-2 rounded" style={{ backgroundColor: '#f2f9fb', border: '1px dashed #00B9F2' }}>
                        <span>üòû 1 - –í–æ–æ–ø—à—Ç–æ</span>
                        <span>üòê 2 - –ú–∞–ª–∫—É</span>
                        <span>üòå 3 - –£–º–µ—Ä–µ–Ω–æ</span>
                        <span>üòä 4 - –ú–Ω–æ–≥—É</span>
                        <span>üòÅ 5 - –ü—Ä–µ–º–Ω–æ–≥—É</span>
                    </div>
                    <form onSubmit={handleSubmit} className="m-4">
                        {questions.map((q, i) => (
                            <div
                                className="mb-4"
                                key={i}
                                style={{
                                    backgroundColor: "#f9f6f1",
                                    padding: "15px",
                                    borderRadius: "10px",
                                    boxShadow: "0 2px 6px rgba(0, 185, 242, 0.15)",
                                    transition: "transform 0.3s",
                                }}
                                onMouseEnter={e => e.currentTarget.style.transform = "scale(1.02)"}
                                onMouseLeave={e => e.currentTarget.style.transform = "scale(1)"}
                            >
                                <label
                                    className="form-label"
                                    style={{ fontWeight: "600", color: "#00B9F2", fontSize: "1.1rem" }}
                                    htmlFor={`question-${i}`}
                                >
                                    {q}
                                </label>
                                <select
                                    className="form-select shadow-sm rounded-3 px-3 py-2"
                                    id={`question-${i}`}
                                    value={answers[i]}
                                    onChange={(e) => handleChange(i, e.target.value)}
                                    style={{
                                        border: "2px solid #00B9F2",
                                        fontWeight: "600",
                                        backgroundColor: "#dde7e8",
                                        color: "#000000",
                                        transition: "0.3s ease-in-out",
                                    }}
                                >
                                    <option value={0}>–ù–µ–º–∞ –æ–¥–≥–æ–≤–æ—Ä</option>
                                    <option value={1}>1</option>
                                    <option value={2}>2</option>
                                    <option value={3}>3</option>
                                    <option value={4}>4</option>
                                    <option value={5}>5</option>
                                </select>
                            </div>
                        ))}
                        <button
                            type="submit"
                            className="btn btn-primary mt-3"
                            disabled= {isDisabled()}
                            style={{
                                backgroundColor: "#00B9F2",
                                borderColor: "#00B9F2",
                                fontWeight: "700",
                                fontSize: "1.1rem",
                                padding: "10px 20px",
                                boxShadow: "0 4px 8px rgba(0, 185, 242, 0.4)",
                                transition: "background-color 0.3s ease",
                            }}
                            onMouseEnter={e => e.currentTarget.style.backgroundColor = "#008ecf"}
                            onMouseLeave={e => e.currentTarget.style.backgroundColor = "#00B9F2"}
                        >
                            {isDisabled() ? "–û–¥–≥–æ–≤–æ—Ä–∏ –Ω–∞ —Å–∏—Ç–µ –ø—Ä–∞—à–∞—ö–∞" : "–ò—Å–ø—Ä–∞—Ç–∏"}
                        </button>
                    </form>
                </>
            ) : (
                <div
                    className="p-4 rounded-4"
                    style={{
                        backgroundColor: "#FFFADA",
                        border: `3px solid ${advice.color}`,
                        boxShadow: `0 0 20px ${advice.color}`,
                        textAlign: "center",
                        maxWidth: "700px",
                        margin: "auto",
                    }}
                >
                    <h3 style={{ color: advice.color, fontWeight: "800", marginBottom: "10px" }}>
                        {advice.title}
                    </h3>
                    <p style={{ fontSize: "1.25rem", fontWeight: "600" }}>{advice.text}</p>
                    <p style={{ fontStyle: "italic", marginTop: "20px", fontWeight: "600", color: advice.color }}>
                        {advice.challenge}
                    </p>
                    <p
                        style={{
                            fontWeight: "700",
                            fontSize: "1rem",
                            marginTop: "30px",
                            color: "#28231D",
                            userSelect: "none",
                        }}
                    >
                        –í–∫—É–ø–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç: <span style={{ color: advice.color }}>{totalScore} –ø–æ–µ–Ω–∏</span>
                    </p>

                    <div style={{ marginTop: "30px" }}>
                        <Line data={chartData} options={chartOptions} />
                    </div>
                    <button
                        className="btn btn-outline-secondary mt-4"
                        onClick={() => {
                            setAnswers([]);
                            setSubmitted(false);
                        }}
                        style={{
                            borderColor: "#00B9F2",
                            color: "#00B9F2",
                            fontWeight: "600",
                            transition: "0.3s",
                        }}
                        onMouseEnter={e => {
                            e.currentTarget.style.backgroundColor = "#00B9F2";
                            e.currentTarget.style.color = "#FFFADA";
                        }}
                        onMouseLeave={e => {
                            e.currentTarget.style.backgroundColor = "transparent";
                            e.currentTarget.style.color = "#00B9F2";
                        }}
                    >
                        –ü–æ–ø—Ä–∞–≤–∏ –æ–¥–≥–æ–≤–æ—Ä–∏
                    </button>
                </div>
            )}
        </div>
    );
};

export default MoodTracker;